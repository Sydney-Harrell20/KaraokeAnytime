{"ast":null,"code":"import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nvar MUST_BE_WRAPPED_MESSAGE = \"Component must be wrapped with WebPlaybackSDK.\";\nvar SPOTIFY_WEB_PLAYBACK_SDK_URL = \"https://sdk.scdn.co/spotify-player.js\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar WebPlaybackSDKReadyContext = createContext(undefined);\n\nvar WebPlaybackSDKReadyProvider = function WebPlaybackSDKReadyProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(false),\n      webPlaybackSDKReady = _useState[0],\n      setWebPlaybackSDKReady = _useState[1];\n\n  useEffect(function () {\n    window.onSpotifyWebPlaybackSDKReady = function () {\n      setWebPlaybackSDKReady(true);\n    };\n  }, []);\n  return React.createElement(WebPlaybackSDKReadyContext.Provider, {\n    value: webPlaybackSDKReady\n  }, children);\n};\n\nfunction useWebPlaybackSDKReady() {\n  var value = useContext(WebPlaybackSDKReadyContext);\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n  return value;\n}\n\nvar PlayerContext = createContext(undefined);\n\nvar SpotifyPlayerProvider = function SpotifyPlayerProvider(_ref) {\n  var children = _ref.children,\n      initialDeviceName = _ref.initialDeviceName,\n      getOAuthToken = _ref.getOAuthToken,\n      initialVolume = _ref.initialVolume,\n      connectOnInitialized = _ref.connectOnInitialized;\n\n  var _useState = useState(null),\n      player = _useState[0],\n      setPlayer = _useState[1];\n\n  var webPlaybackSDKReady = useWebPlaybackSDKReady(); // to get the latest function.\n\n  var getOAuthTokenRef = useRef(getOAuthToken);\n  getOAuthTokenRef.current = getOAuthToken; // create Spotify.Player instance.\n\n  useEffect(function () {\n    if (webPlaybackSDKReady) {\n      var _player = new Spotify.Player({\n        name: initialDeviceName,\n        getOAuthToken: function getOAuthToken(callback) {\n          return getOAuthTokenRef.current(callback);\n        },\n        volume: initialVolume\n      });\n\n      setPlayer(_player);\n\n      if (connectOnInitialized) {\n        _player.connect();\n      }\n\n      return function () {\n        return _player.disconnect();\n      };\n    }\n  }, // `deviceName` and `volume` are intentionally not passed.\n  // When they are changed, they will be applied with the following useUpdateEffect.\n  [connectOnInitialized, webPlaybackSDKReady]);\n  return React.createElement(PlayerContext.Provider, {\n    value: player,\n    children: children\n  });\n};\n\nfunction useSpotifyPlayer() {\n  var value = useContext(PlayerContext);\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n  return value;\n}\n\nvar DeviceContext = createContext(undefined);\n\nvar DeviceProvider = function DeviceProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      device = _useState[0],\n      setDevice = _useState[1];\n\n  var player = useSpotifyPlayer();\n  useEffect(function () {\n    if (player === null) return;\n\n    var ready = function ready(device) {\n      setDevice(_extends({}, device, {\n        status: \"ready\"\n      }));\n    };\n\n    var notReady = function notReady(device) {\n      setDevice(_extends({}, device, {\n        status: \"not_ready\"\n      }));\n    };\n\n    player.addListener(\"ready\", ready);\n    player.addListener(\"not_ready\", notReady);\n    return function () {\n      player.removeListener(\"ready\", ready);\n      player.removeListener(\"not_ready\", notReady);\n    };\n  }, [player]);\n  return React.createElement(DeviceContext.Provider, {\n    value: device,\n    children: children\n  });\n};\n\nfunction usePlayerDevice() {\n  var value = useContext(DeviceContext);\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n  return value;\n}\n\nvar ErrorStateContext = createContext(undefined);\n\nvar ErrorStateProvider = function ErrorStateProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      errorState = _useState[0],\n      setErrorState = _useState[1];\n\n  var player = useSpotifyPlayer();\n  useEffect(function () {\n    if (player === null) return;\n\n    var onInitializationError = function onInitializationError(error) {\n      setErrorState(_extends({}, error, {\n        type: \"initialization_error\"\n      }));\n    };\n\n    var onAuthenticationError = function onAuthenticationError(error) {\n      setErrorState(_extends({}, error, {\n        type: \"authentication_error\"\n      }));\n    };\n\n    var onAccountError = function onAccountError(error) {\n      setErrorState(_extends({}, error, {\n        type: \"account_error\"\n      }));\n    };\n\n    var onPlaybackError = function onPlaybackError(error) {\n      setErrorState(_extends({}, error, {\n        type: \"playback_error\"\n      }));\n    };\n\n    player.addListener(\"initialization_error\", onInitializationError);\n    player.addListener(\"authentication_error\", onAuthenticationError);\n    player.addListener(\"account_error\", onAccountError);\n    player.addListener(\"playback_error\", onPlaybackError);\n    return function () {\n      player.removeListener(\"initialization_error\", onInitializationError);\n      player.removeListener(\"authentication_error\", onAuthenticationError);\n      player.removeListener(\"account_error\", onAccountError);\n      player.removeListener(\"playback_error\", onPlaybackError);\n    };\n  }, [player]);\n  return React.createElement(ErrorStateContext.Provider, {\n    value: errorState,\n    children: children\n  });\n};\n\nfunction useErrorState() {\n  var value = useContext(ErrorStateContext);\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n  return value;\n}\n\nvar PlaybackStateContext = createContext(undefined);\n\nvar PlaybackStateProvider = function PlaybackStateProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(null),\n      playbackState = _useState[0],\n      setPlaybackState = _useState[1];\n\n  var player = useSpotifyPlayer();\n  useEffect(function () {\n    if (player === null) return;\n\n    var playerStateChanged = function playerStateChanged(state) {\n      setPlaybackState(state);\n    };\n\n    player.addListener(\"player_state_changed\", playerStateChanged);\n    return function () {\n      return player.removeListener(\"player_state_changed\", playerStateChanged);\n    };\n  }, [player]);\n  return React.createElement(PlaybackStateContext.Provider, {\n    value: playbackState,\n    children: children\n  });\n};\n\nfunction usePlaybackState(interval, durationMS) {\n  if (interval === void 0) {\n    interval = false;\n  }\n\n  if (durationMS === void 0) {\n    durationMS = 1000;\n  }\n\n  var fromContext = useContext(PlaybackStateContext);\n  if (fromContext === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  var _useState2 = useState(fromContext),\n      playbackState = _useState2[0],\n      setPlaybackState = _useState2[1];\n\n  var player = useSpotifyPlayer();\n  useEffect(function () {\n    return setPlaybackState(fromContext);\n  }, [fromContext]);\n  var playbackStateIsNull = playbackState === null;\n  useEffect(function () {\n    if (!interval) return;\n    if (player === null) return;\n    if (playbackStateIsNull) return;\n    if (playbackState.paused) return;\n    var intervalId = window.setInterval(function () {\n      try {\n        return Promise.resolve(player.getCurrentState()).then(function (newState) {\n          setPlaybackState(newState);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }, durationMS);\n    return function () {\n      return window.clearInterval(intervalId);\n    };\n  }, [interval, player, playbackStateIsNull, playbackState == null ? void 0 : playbackState.paused, durationMS]);\n  return playbackState;\n}\n\nvar WebPlaybackSDK = function WebPlaybackSDK(_ref) {\n  var children = _ref.children,\n      initialDeviceName = _ref.initialDeviceName,\n      getOAuthToken = _ref.getOAuthToken,\n      initialVolume = _ref.initialVolume,\n      _ref$connectOnInitial = _ref.connectOnInitialized,\n      connectOnInitialized = _ref$connectOnInitial === void 0 ? true : _ref$connectOnInitial;\n  useEffect(function () {\n    // load Web Playback SDK.\n    var script = document.createElement(\"script\");\n    script.src = SPOTIFY_WEB_PLAYBACK_SDK_URL;\n    document.body.appendChild(script);\n    return function () {\n      document.body.removeChild(script);\n    };\n  }, []);\n  return React.createElement(WebPlaybackSDKReadyProvider, null, React.createElement(SpotifyPlayerProvider, {\n    initialDeviceName: initialDeviceName,\n    getOAuthToken: getOAuthToken,\n    initialVolume: initialVolume,\n    connectOnInitialized: connectOnInitialized\n  }, React.createElement(PlaybackStateProvider, null, React.createElement(DeviceProvider, null, React.createElement(ErrorStateProvider, null, children)))));\n};\n\nexport { WebPlaybackSDK, useErrorState, usePlaybackState, usePlayerDevice, useSpotifyPlayer, useWebPlaybackSDKReady };","map":{"version":3,"mappings":";AAAO,IAAMA,uBAAuB,GAClC,gDADK;AAGA,IAAMC,4BAA4B,GAAG,uCAArC;;;;;;;;;;;;;;;;;;;;ACAP,IAAMC,0BAA0B,GAAGC,aAAa,CAAsBC,SAAtB,CAAhD;;AAEO,IAAMC,2BAA2B,GAAa,SAAxCA,2BAAwC;MAAGC;;kBACAC,QAAQ,CAAC,KAAD;MAAvDC;MAAqBC;;EAE5BC,SAAS,CAAC;IACRC,MAAM,CAACC,4BAAPD,GAAsC;MACpCF,sBAAsB,CAAC,IAAD,CAAtBA;IADF;EADO,GAIN,EAJM,CAATC;EAMA,OACEG,oBAACX,0BAA0B,CAACY,QAA5BD;IAAqCE,KAAK,EAAEP;EAA5C,GACGF,QADHO,CADF;AATK;;SAgBSG;EACd,IAAMD,KAAK,GAAGE,UAAU,CAACf,0BAAD,CAAxB;EAEA,IAAIa,KAAK,KAAKX,SAAd,EAAyB,MAAM,IAAIc,KAAJ,CAAUlB,uBAAV,CAAN;EAEzB,OAAOe,KAAP;AACD;;ACjBD,IAAMI,aAAa,GAAGhB,aAAa,CAAoCC,SAApC,CAAnC;;AASO,IAAMgB,qBAAqB,GAA4B,SAAjDA,qBAAiD;MAC5Dd;MACAe;MACAC;MACAC;MACAC;;kBAE4BjB,QAAQ,CAAwB,IAAxB;MAA7BkB;MAAQC;;EACf,IAAMlB,mBAAmB,GAAGQ,sBAAsB,EAAlD,CAR4D,CAQ5D;;EAGA,IAAMW,gBAAgB,GAAGC,MAAM,CAACN,aAAD,CAA/B;EACAK,gBAAgB,CAACE,OAAjBF,GAA2BL,aAA3BK,CAZ4D,CAY5D;;EAGAjB,SAAS,CACP;IACE,IAAIF,mBAAJ,EAAyB;MACvB,IAAMiB,OAAM,GAAG,IAAIK,OAAO,CAACC,MAAZ,CAAmB;QAChCC,IAAI,EAAEX,iBAD0B;QAEhCC,aAAa,EAAE,iCAAQ;UAAA,OAAIK,gBAAgB,CAACE,OAAjBF,CAAyBM,QAAzBN,CAAJ;QAFS;QAGhCO,MAAM,EAAEX;MAHwB,CAAnB,CAAf;;MAMAG,SAAS,CAACD,OAAD,CAATC;;MAEA,IAAIF,oBAAJ,EAA0B;QACxBC,OAAM,CAACU,OAAPV;MACD;;MAED,OAAO;QAAA,OAAMA,OAAM,CAACW,UAAPX,EAAN;MAAP;IACD;EAhBI;EAmBP;EACA,CAACD,oBAAD,EAAuBhB,mBAAvB,CApBO,CAATE;EAuBA,OAAOG,oBAACM,aAAa,CAACL,QAAfD;IAAwBE,KAAK,EAAEU,MAA/B;IAAuCnB,QAAQ,EAAEA;EAAjD,EAAP;AAtCK;;SAyCS+B;EACd,IAAMtB,KAAK,GAAGE,UAAU,CAACE,aAAD,CAAxB;EAEA,IAAIJ,KAAK,KAAKX,SAAd,EAAyB,MAAM,IAAIc,KAAJ,CAAUlB,uBAAV,CAAN;EAEzB,OAAOe,KAAP;AACD;;AC1DD,IAAMuB,aAAa,GAAGnC,aAAa,CAAkCC,SAAlC,CAAnC;;AAEO,IAAMmC,cAAc,GAAa,SAA3BA,cAA2B;MAAGjC;;kBACbC,QAAQ,CAAsB,IAAtB;MAA7BiC;MAAQC;;EACf,IAAMhB,MAAM,GAAGY,gBAAgB,EAA/B;EAEA3B,SAAS,CAAC;IACR,IAAIe,MAAM,KAAK,IAAf,EAAqB;;IAErB,IAAMiB,KAAK,GAAG,SAARA,KAAQ,CAACF,MAAD;MACZC,SAAS,cAAMD,MAAN;QAAcG,MAAM,EAAE;MAAtB,GAATF;IADF;;IAIA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACJ,MAAD;MACfC,SAAS,cAAMD,MAAN;QAAcG,MAAM,EAAE;MAAtB,GAATF;IADF;;IAIAhB,MAAM,CAACoB,WAAPpB,CAAmB,OAAnBA,EAA4BiB,KAA5BjB;IACAA,MAAM,CAACoB,WAAPpB,CAAmB,WAAnBA,EAAgCmB,QAAhCnB;IAEA,OAAO;MACLA,MAAM,CAACqB,cAAPrB,CAAsB,OAAtBA,EAA+BiB,KAA/BjB;MACAA,MAAM,CAACqB,cAAPrB,CAAsB,WAAtBA,EAAmCmB,QAAnCnB;IAFF;EAdO,GAkBN,CAACA,MAAD,CAlBM,CAATf;EAoBA,OAAOG,oBAACyB,aAAa,CAACxB,QAAfD;IAAwBE,KAAK,EAAEyB,MAA/B;IAAuClC,QAAQ,EAAEA;EAAjD,EAAP;AAxBK;;SA2BSyC;EACd,IAAMhC,KAAK,GAAGE,UAAU,CAACqB,aAAD,CAAxB;EAEA,IAAIvB,KAAK,KAAKX,SAAd,EAAyB,MAAM,IAAIc,KAAJ,CAAUlB,uBAAV,CAAN;EAEzB,OAAOe,KAAP;AACD;;ACrCD,IAAMiC,iBAAiB,GAAG7C,aAAa,CAAgCC,SAAhC,CAAvC;;AAEO,IAAM6C,kBAAkB,GAAa,SAA/BA,kBAA+B;MAAG3C;;kBACTC,QAAQ,CAAoB,IAApB;MAArC2C;MAAYC;;EACnB,IAAM1B,MAAM,GAAGY,gBAAgB,EAA/B;EAEA3B,SAAS,CAAC;IACR,IAAIe,MAAM,KAAK,IAAf,EAAqB;;IAErB,IAAM2B,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,KAAD;MAC5BF,aAAa,cAAME,KAAN;QAAaC,IAAI,EAAE;MAAnB,GAAbH;IADF;;IAIA,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,KAAD;MAC5BF,aAAa,cAAME,KAAN;QAAaC,IAAI,EAAE;MAAnB,GAAbH;IADF;;IAIA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,CAACH,KAAD;MACrBF,aAAa,cAAME,KAAN;QAAaC,IAAI,EAAE;MAAnB,GAAbH;IADF;;IAIA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACJ,KAAD;MACtBF,aAAa,cAAME,KAAN;QAAaC,IAAI,EAAE;MAAnB,GAAbH;IADF;;IAIA1B,MAAM,CAACoB,WAAPpB,CAAmB,sBAAnBA,EAA2C2B,qBAA3C3B;IACAA,MAAM,CAACoB,WAAPpB,CAAmB,sBAAnBA,EAA2C8B,qBAA3C9B;IACAA,MAAM,CAACoB,WAAPpB,CAAmB,eAAnBA,EAAoC+B,cAApC/B;IACAA,MAAM,CAACoB,WAAPpB,CAAmB,gBAAnBA,EAAqCgC,eAArChC;IAEA,OAAO;MACLA,MAAM,CAACqB,cAAPrB,CAAsB,sBAAtBA,EAA8C2B,qBAA9C3B;MACAA,MAAM,CAACqB,cAAPrB,CAAsB,sBAAtBA,EAA8C8B,qBAA9C9B;MACAA,MAAM,CAACqB,cAAPrB,CAAsB,eAAtBA,EAAuC+B,cAAvC/B;MACAA,MAAM,CAACqB,cAAPrB,CAAsB,gBAAtBA,EAAwCgC,eAAxChC;IAJF;EAxBO,GA8BN,CAACA,MAAD,CA9BM,CAATf;EAgCA,OAAOG,oBAACmC,iBAAiB,CAAClC,QAAnBD;IAA4BE,KAAK,EAAEmC,UAAnC;IAA+C5C,QAAQ,EAAEA;EAAzD,EAAP;AApCK;;SAuCSoD;EACd,IAAM3C,KAAK,GAAGE,UAAU,CAAC+B,iBAAD,CAAxB;EAEA,IAAIjC,KAAK,KAAKX,SAAd,EAAyB,MAAM,IAAIc,KAAJ,CAAUlB,uBAAV,CAAN;EAEzB,OAAOe,KAAP;AACD;;ACjDD,IAAM4C,oBAAoB,GAAGxD,aAAa,CACxCC,SADwC,CAA1C;;AAIO,IAAMwD,qBAAqB,GAAa,SAAlCA,qBAAkC;MAAGtD;;kBACNC,QAAQ,CAChD,IADgD;MAA3CsD;MAAeC;;EAItB,IAAMrC,MAAM,GAAGY,gBAAgB,EAA/B;EAEA3B,SAAS,CAAC;IACR,IAAIe,MAAM,KAAK,IAAf,EAAqB;;IAErB,IAAMsC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD;MACzBF,gBAAgB,CAACE,KAAD,CAAhBF;IADF;;IAIArC,MAAM,CAACoB,WAAPpB,CAAmB,sBAAnBA,EAA2CsC,kBAA3CtC;IAEA,OAAO;MAAA,OAAMA,MAAM,CAACqB,cAAPrB,CAAsB,sBAAtBA,EAA8CsC,kBAA9CtC,CAAN;IAAP;EATO,GAUN,CAACA,MAAD,CAVM,CAATf;EAYA,OAAOG,oBAAC8C,oBAAoB,CAAC7C,QAAtBD;IAA+BE,KAAK,EAAE8C,aAAtC;IAAqDvD,QAAQ,EAAEA;EAA/D,EAAP;AAnBK;;SAsBS2D,iBACdC,UACAC;MADAD;IAAAA,WAAW,KAAXA;;;MACAC;IAAAA,aAAa,IAAbA;;;EAEA,IAAMC,WAAW,GAAGnD,UAAU,CAAC0C,oBAAD,CAA9B;EAEA,IAAIS,WAAW,KAAKhE,SAApB,EAA+B,MAAM,IAAIc,KAAJ,CAAUlB,uBAAV,CAAN;;mBAEWO,QAAQ,CAAC6D,WAAD;MAA3CP;MAAeC;;EAEtB,IAAMrC,MAAM,GAAGY,gBAAgB,EAA/B;EAEA3B,SAAS,CAAC;IAAA,OAAMoD,gBAAgB,CAACM,WAAD,CAAtB;EAAD,GAAsC,CAACA,WAAD,CAAtC,CAAT1D;EAEA,IAAM2D,mBAAmB,GAAGR,aAAa,KAAK,IAA9C;EACAnD,SAAS,CAAC;IACR,IAAI,CAACwD,QAAL,EAAe;IACf,IAAIzC,MAAM,KAAK,IAAf,EAAqB;IACrB,IAAI4C,mBAAJ,EAAyB;IAEzB,IAAIR,aAAc,CAACS,MAAnB,EAA2B;IAE3B,IAAMC,UAAU,GAAG5D,MAAM,CAAC6D,WAAP7D;MAAA;+BACMc,MAAM,CAACgD,eAAPhD,mBAAjBiD,QAAiB,EAAjBA;UACNZ,gBAAgB,CAACY,QAAD,CAAhBZ;;MAFiB;QAAA;MAAA;IAAA,GAGhBK,UAHgBxD,CAAnB;IAKA,OAAO;MAAA,OAAMA,MAAM,CAACgE,aAAPhE,CAAqB4D,UAArB5D,CAAN;IAAP;EAZO,GAaN,CAACuD,QAAD,EAAWzC,MAAX,EAAmB4C,mBAAnB,EAAwCR,aAAxC,QAAwCA,GAAxC,MAAwCA,gBAAa,CAAES,MAAvD,EAA+DH,UAA/D,CAbM,CAATzD;EAeA,OAAOmD,aAAP;AACD;;IC9CYe,cAAc,GAAkC,SAAhDA,cAAgD;MAC3DtE;MACAe;MACAC;MACAC;mCACAC;MAAAA,0DAAuB,IAAvBA,GAAuBqD;EAEvBnE,SAAS,CAAC;IACR;IACA,IAAMoE,MAAM,GAAGC,QAAQ,CAACC,aAATD,CAAuB,QAAvBA,CAAf;IACAD,MAAM,CAACG,GAAPH,GAAa7E,4BAAb6E;IACAC,QAAQ,CAACG,IAATH,CAAcI,WAAdJ,CAA0BD,MAA1BC;IAEA,OAAO;MACLA,QAAQ,CAACG,IAATH,CAAcK,WAAdL,CAA0BD,MAA1BC;IADF;EANO,GASN,EATM,CAATrE;EAWA,OACEG,oBAACR,2BAADQ,QACEA,oBAACO,qBAADP;IACEQ,iBAAiB,EAAEA,iBADrB;IAEEC,aAAa,EAAEA,aAFjB;IAGEC,aAAa,EAAEA,aAHjB;IAIEC,oBAAoB,EAAEA;EAJxB,GAKEX,oBAAC+C,qBAAD/C,QACEA,oBAAC0B,cAAD1B,QACEA,oBAACoC,kBAADpC,QAAqBP,QAArBO,CADFA,CADFA,CALFA,CADFA,CADF;AAeD","names":["MUST_BE_WRAPPED_MESSAGE","SPOTIFY_WEB_PLAYBACK_SDK_URL","WebPlaybackSDKReadyContext","createContext","undefined","WebPlaybackSDKReadyProvider","children","useState","webPlaybackSDKReady","setWebPlaybackSDKReady","useEffect","window","onSpotifyWebPlaybackSDKReady","React","Provider","value","useWebPlaybackSDKReady","useContext","Error","PlayerContext","SpotifyPlayerProvider","initialDeviceName","getOAuthToken","initialVolume","connectOnInitialized","player","setPlayer","getOAuthTokenRef","useRef","current","Spotify","Player","name","callback","volume","connect","disconnect","useSpotifyPlayer","DeviceContext","DeviceProvider","device","setDevice","ready","status","notReady","addListener","removeListener","usePlayerDevice","ErrorStateContext","ErrorStateProvider","errorState","setErrorState","onInitializationError","error","type","onAuthenticationError","onAccountError","onPlaybackError","useErrorState","PlaybackStateContext","PlaybackStateProvider","playbackState","setPlaybackState","playerStateChanged","state","usePlaybackState","interval","durationMS","fromContext","playbackStateIsNull","paused","intervalId","setInterval","getCurrentState","newState","clearInterval","WebPlaybackSDK","_ref$connectOnInitial","script","document","createElement","src","body","appendChild","removeChild"],"sources":["C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\constant.ts","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\webPlaybackSDKReady.tsx","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\spotifyPlayer.tsx","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\device.tsx","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\errorState.tsx","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\playbackState.tsx","C:\\Users\\Andrew\\karaokewebapp\\node_modules\\react-spotify-web-playback-sdk\\src\\webPlaybackSDK.tsx"],"sourcesContent":["export const MUST_BE_WRAPPED_MESSAGE =\n  \"Component must be wrapped with WebPlaybackSDK.\";\n\nexport const SPOTIFY_WEB_PLAYBACK_SDK_URL = \"https://sdk.scdn.co/spotify-player.js\";\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { MUST_BE_WRAPPED_MESSAGE } from \"./constant\";\n\nconst WebPlaybackSDKReadyContext = createContext<boolean | undefined>(undefined);\n\nexport const WebPlaybackSDKReadyProvider: React.FC = ({ children }) => {\n  const [webPlaybackSDKReady, setWebPlaybackSDKReady] = useState(false);\n\n  useEffect(() => {\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      setWebPlaybackSDKReady(true);\n    };\n  }, []);\n\n  return (\n    <WebPlaybackSDKReadyContext.Provider value={webPlaybackSDKReady}>\n      {children}\n    </WebPlaybackSDKReadyContext.Provider>\n  );\n};\n\nexport function useWebPlaybackSDKReady() {\n  const value = useContext(WebPlaybackSDKReadyContext);\n\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  return value;\n}\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { MUST_BE_WRAPPED_MESSAGE } from \"./constant\";\nimport { useWebPlaybackSDKReady } from \"./webPlaybackSDKReady\";\n\nconst PlayerContext = createContext<Spotify.Player | null | undefined>(undefined);\n\ntype ProviderProps = {\n  initialDeviceName: Spotify.PlayerInit[\"name\"];\n  getOAuthToken: Spotify.PlayerInit[\"getOAuthToken\"];\n  initialVolume?: Spotify.PlayerInit[\"volume\"];\n  connectOnInitialized: boolean;\n};\n\nexport const SpotifyPlayerProvider: React.FC<ProviderProps> = ({\n  children,\n  initialDeviceName,\n  getOAuthToken,\n  initialVolume,\n  connectOnInitialized,\n}) => {\n  const [player, setPlayer] = useState<Spotify.Player | null>(null);\n  const webPlaybackSDKReady = useWebPlaybackSDKReady();\n\n  // to get the latest function.\n  const getOAuthTokenRef = useRef(getOAuthToken);\n  getOAuthTokenRef.current = getOAuthToken;\n\n  // create Spotify.Player instance.\n  useEffect(\n    () => {\n      if (webPlaybackSDKReady) {\n        const player = new Spotify.Player({\n          name: initialDeviceName,\n          getOAuthToken: callback => getOAuthTokenRef.current(callback),\n          volume: initialVolume,\n        });\n\n        setPlayer(player);\n\n        if (connectOnInitialized) {\n          player.connect();\n        }\n\n        return () => player.disconnect();\n      }\n    },\n    // `deviceName` and `volume` are intentionally not passed.\n    // When they are changed, they will be applied with the following useUpdateEffect.\n    [connectOnInitialized, webPlaybackSDKReady],\n  );\n\n  return <PlayerContext.Provider value={player} children={children} />;\n};\n\nexport function useSpotifyPlayer() {\n  const value = useContext(PlayerContext);\n\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  return value;\n}\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { MUST_BE_WRAPPED_MESSAGE } from \"./constant\";\nimport { useSpotifyPlayer } from \"./spotifyPlayer\";\n\nexport type PlayerDevice = Spotify.WebPlaybackInstance & {\n  status: \"ready\" | \"not_ready\";\n};\n\nconst DeviceContext = createContext<PlayerDevice | null | undefined>(undefined);\n\nexport const DeviceProvider: React.FC = ({ children }) => {\n  const [device, setDevice] = useState<PlayerDevice | null>(null);\n  const player = useSpotifyPlayer();\n\n  useEffect(() => {\n    if (player === null) return;\n\n    const ready = (device: Spotify.WebPlaybackInstance) => {\n      setDevice({ ...device, status: \"ready\" });\n    };\n\n    const notReady = (device: Spotify.WebPlaybackInstance) => {\n      setDevice({ ...device, status: \"not_ready\" });\n    };\n\n    player.addListener(\"ready\", ready);\n    player.addListener(\"not_ready\", notReady);\n\n    return () => {\n      player.removeListener(\"ready\", ready);\n      player.removeListener(\"not_ready\", notReady);\n    };\n  }, [player]);\n\n  return <DeviceContext.Provider value={device} children={children} />;\n};\n\nexport function usePlayerDevice() {\n  const value = useContext(DeviceContext);\n\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  return value;\n}\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { MUST_BE_WRAPPED_MESSAGE } from \"./constant\";\nimport { useSpotifyPlayer } from \"./spotifyPlayer\";\n\nexport type ErrorState = Spotify.Error & { type: Spotify.ErrorTypes };\n\nconst ErrorStateContext = createContext<ErrorState | null | undefined>(undefined);\n\nexport const ErrorStateProvider: React.FC = ({ children }) => {\n  const [errorState, setErrorState] = useState<ErrorState | null>(null);\n  const player = useSpotifyPlayer();\n\n  useEffect(() => {\n    if (player === null) return;\n\n    const onInitializationError = (error: Spotify.Error) => {\n      setErrorState({ ...error, type: \"initialization_error\" });\n    };\n\n    const onAuthenticationError = (error: Spotify.Error) => {\n      setErrorState({ ...error, type: \"authentication_error\" });\n    };\n\n    const onAccountError = (error: Spotify.Error) => {\n      setErrorState({ ...error, type: \"account_error\" });\n    };\n\n    const onPlaybackError = (error: Spotify.Error) => {\n      setErrorState({ ...error, type: \"playback_error\" });\n    };\n\n    player.addListener(\"initialization_error\", onInitializationError);\n    player.addListener(\"authentication_error\", onAuthenticationError);\n    player.addListener(\"account_error\", onAccountError);\n    player.addListener(\"playback_error\", onPlaybackError);\n\n    return () => {\n      player.removeListener(\"initialization_error\", onInitializationError);\n      player.removeListener(\"authentication_error\", onAuthenticationError);\n      player.removeListener(\"account_error\", onAccountError);\n      player.removeListener(\"playback_error\", onPlaybackError);\n    };\n  }, [player]);\n\n  return <ErrorStateContext.Provider value={errorState} children={children} />;\n};\n\nexport function useErrorState() {\n  const value = useContext(ErrorStateContext);\n\n  if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  return value;\n}\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { MUST_BE_WRAPPED_MESSAGE } from \"./constant\";\nimport { useSpotifyPlayer } from \"./spotifyPlayer\";\n\nconst PlaybackStateContext = createContext<Spotify.PlaybackState | null | undefined>(\n  undefined,\n);\n\nexport const PlaybackStateProvider: React.FC = ({ children }) => {\n  const [playbackState, setPlaybackState] = useState<Spotify.PlaybackState | null>(\n    null,\n  );\n\n  const player = useSpotifyPlayer();\n\n  useEffect(() => {\n    if (player === null) return;\n\n    const playerStateChanged = (state: Spotify.PlaybackState) => {\n      setPlaybackState(state);\n    };\n\n    player.addListener(\"player_state_changed\", playerStateChanged);\n\n    return () => player.removeListener(\"player_state_changed\", playerStateChanged);\n  }, [player]);\n\n  return <PlaybackStateContext.Provider value={playbackState} children={children} />;\n};\n\nexport function usePlaybackState(\n  interval = false,\n  durationMS = 1000,\n): Spotify.PlaybackState | null {\n  const fromContext = useContext(PlaybackStateContext);\n\n  if (fromContext === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);\n\n  const [playbackState, setPlaybackState] = useState(fromContext);\n\n  const player = useSpotifyPlayer();\n\n  useEffect(() => setPlaybackState(fromContext), [fromContext]);\n\n  const playbackStateIsNull = playbackState === null;\n  useEffect(() => {\n    if (!interval) return;\n    if (player === null) return;\n    if (playbackStateIsNull) return;\n\n    if (playbackState!.paused) return;\n\n    const intervalId = window.setInterval(async () => {\n      const newState = await player.getCurrentState();\n      setPlaybackState(newState);\n    }, durationMS);\n\n    return () => window.clearInterval(intervalId);\n  }, [interval, player, playbackStateIsNull, playbackState?.paused, durationMS]);\n\n  return playbackState;\n}\n","import React, { useEffect } from \"react\";\nimport { SPOTIFY_WEB_PLAYBACK_SDK_URL } from \"./constant\";\nimport { DeviceProvider } from \"./device\";\nimport { ErrorStateProvider } from \"./errorState\";\nimport { PlaybackStateProvider } from \"./playbackState\";\nimport { SpotifyPlayerProvider } from \"./spotifyPlayer\";\nimport { WebPlaybackSDKReadyProvider } from \"./webPlaybackSDKReady\";\n\nexport type WebPlaybackSDKProps = {\n  initialDeviceName: Spotify.PlayerInit[\"name\"];\n  getOAuthToken: Spotify.PlayerInit[\"getOAuthToken\"];\n  initialVolume?: Spotify.PlayerInit[\"volume\"];\n  connectOnInitialized?: boolean;\n};\n\nexport const WebPlaybackSDK: React.FC<WebPlaybackSDKProps> = ({\n  children,\n  initialDeviceName,\n  getOAuthToken,\n  initialVolume,\n  connectOnInitialized = true,\n}) => {\n  useEffect(() => {\n    // load Web Playback SDK.\n    const script = document.createElement(\"script\");\n    script.src = SPOTIFY_WEB_PLAYBACK_SDK_URL;\n    document.body.appendChild(script);\n\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n\n  return (\n    <WebPlaybackSDKReadyProvider>\n      <SpotifyPlayerProvider\n        initialDeviceName={initialDeviceName}\n        getOAuthToken={getOAuthToken}\n        initialVolume={initialVolume}\n        connectOnInitialized={connectOnInitialized}>\n        <PlaybackStateProvider>\n          <DeviceProvider>\n            <ErrorStateProvider>{children}</ErrorStateProvider>\n          </DeviceProvider>\n        </PlaybackStateProvider>\n      </SpotifyPlayerProvider>\n    </WebPlaybackSDKReadyProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}